=============================
How to Use 0-add_integer.py
=============================

`` add_integer (a, b=98) `` returns the addition of its arguments
that value is equivalent to using the `` +'' operator.

Numbers
=======

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(2, 3)
5
>>> add_integer(5, -1)
4
>>> add_integer(5, -6)
-1
>>> add_integer(-10, -2)
-12
>>> add_integer(5.5, 5.5)
10
>>> add_integer(0)
98

Non-Numbers
===========

>>> add_integer('a', 2)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer(4, "School")
Traceback (most recent call last):
...
TypeError: b must be an integer

>>> add_integer([2, 4])
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer([], 3)
Traceback (most recent call last):
...
TypeError: a must be an integer
 
>>> add_integer(None)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer()
Traceback (most recent call last):
...
TypeError: add_integer() missing 1 required positional argument: 'a'

>>> add_integer(2, float('inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

>>> add_integer(2, float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
